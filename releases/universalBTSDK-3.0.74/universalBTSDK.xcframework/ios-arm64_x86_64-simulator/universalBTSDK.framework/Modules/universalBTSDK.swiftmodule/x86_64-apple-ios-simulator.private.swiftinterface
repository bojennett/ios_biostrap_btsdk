// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name universalBTSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreBluetooth
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import iOSDFULibrary
import zlib
@objc public enum diagnosticType : Swift.UInt8, Swift.Codable {
  case sleep = 0x00
  case ppgBroken = 0x01
  case pmicStatus = 0x02
  case algorithm = 0x03
  case rotation = 0x04
  case pmicWatchdog = 0x05
  case bluetoothPacket = 0xfe
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum livotalManufacturingTestType : Swift.Int, Swift.RawRepresentable, Swift.Codable, Swift.CaseIterable {
  case pmic
  case temp
  case flash_if
  case flash_array
  case ppg_if
  case ppg_fifo
  case imu_if
  case imu_fifo
  case led
  public typealias RawValue = Swift.String
  public var rawValue: universalBTSDK.livotalManufacturingTestType.RawValue {
    get
  }
  public init?(rawValue: universalBTSDK.livotalManufacturingTestType.RawValue)
  public var title: Swift.String {
    get
  }
  public typealias AllCases = [universalBTSDK.livotalManufacturingTestType]
  public static var allCases: [universalBTSDK.livotalManufacturingTestType] {
    get
  }
}
@objc public enum alterManufacturingTestType : Swift.UInt8, Swift.Codable, Swift.CaseIterable {
  case flashIF = 0x01
  case flashArray = 0x02
  case spectralIF = 0x03
  case spectralFIFO = 0x04
  case imuIF = 0x05
  case imuFIFO = 0x06
  case led = 0x07
  case ppgUserTriggerButton = 0x09
  case spectralLEDS = 0x0A
  case imuSelfTest = 0x0B
  case spectralLEDLeakage = 0x0C
  case imuNoiseFloor = 0x0D
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [universalBTSDK.alterManufacturingTestType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [universalBTSDK.alterManufacturingTestType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum kairosManufacturingTestType : Swift.UInt8, Swift.Codable, Swift.CaseIterable {
  case flashIF = 0x01
  case flashArray = 0x02
  case spectralIF = 0x03
  case spectralFIFO = 0x04
  case imuIF = 0x05
  case imuFIFO = 0x06
  case led = 0x07
  case ppgUserTriggerButton = 0x09
  case spectralLEDS = 0x0A
  case imuSelfTest = 0x0B
  case spectralLEDLeakage = 0x0C
  case imuNoiseFloor = 0x0D
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [universalBTSDK.kairosManufacturingTestType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [universalBTSDK.kairosManufacturingTestType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum ethosManufacturingTestType : Swift.UInt8, Swift.Codable, Swift.CaseIterable {
  case temp = 0x00
  case flashIF = 0x01
  case flashArray = 0x02
  case spectralIF = 0x03
  case spectralFIFO = 0x04
  case imuIF = 0x05
  case imuFIFO = 0x06
  case led = 0x07
  case motor = 0x08
  case ppgUserTriggerButton = 0x09
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [universalBTSDK.ethosManufacturingTestType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [universalBTSDK.ethosManufacturingTestType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum nextPacketStatusType : Swift.UInt8, Swift.Codable {
  case successful = 0x00
  case busy = 0x01
  case caughtUp = 0x02
  case pageEmpty = 0x03
  case unknownPacket = 0x04
  case badCommandFormat = 0x05
  case badJSON = 0xfc
  case badSDKDecode = 0xfd
  case missingDevice = 0xfe
  case unknown = 0xff
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum settingsType : Swift.UInt8, Swift.Codable {
  case accelHalfRange = 0x00
  case gyroHalfRange = 0x01
  case imuSamplingRate = 0x02
  case ppgCapturePeriod = 0x03
  case ppgCaptureDuration = 0x04
  case ppgSamplingRate = 0x05
  case unknown = 0xff
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum buttonTapType : Swift.UInt8, Swift.Codable, Swift.CaseIterable {
  case single = 0x00
  case double = 0x01
  case triple = 0x02
  case long = 0x03
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [universalBTSDK.buttonTapType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [universalBTSDK.buttonTapType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum ppgStatusType : Swift.UInt8, Swift.Codable {
  case userContinuous = 0x00
  case userComplete = 0x01
  case backgroundComplete = 0x02
  case backgroundMedtor = 0x03
  case backgroundWornStop = 0x04
  case backgroundUserStop = 0x05
  case backgroundMotionStop = 0x06
  case userWornStop = 0x07
  case userUserStop = 0x08
  case userMotionStop = 0x09
  case userMedtorMotion = 0x0a
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum firmwareErorCode : Swift.UInt8 {
  case invalid = 0x00
  case success = 0x01
  case opcodeNotSupported = 0x02
  case invalidParameters = 0x03
  case insufficientResources = 0x04
  case invalidObject = 0x05
  case unsupportedType = 0x07
  case operationNotPermitted = 0x08
  case operationFailed = 0x0A
  case extendedError = 0x0B
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum extendedFirmwareError : Swift.UInt8 {
  case NO_ERROR = 0x00
  case INVALID_ERROR_CODE = 0x01
  case WRONG_COMMAND_FORMAT = 0x02
  case UNKNOWN_COMMAND = 0x03
  case INIT_COMMAND_INVALID = 0x04
  case FW_VERSION_FAILURE = 0x05
  case HW_VERSION_FAILURE = 0x06
  case SD_VERSION_FAILURE = 0x07
  case SIGNATURE_MISSING = 0x08
  case WRONG_HASH_TYPE = 0x09
  case HASH_FAILED = 0x0A
  case WRONG_SIGNATURE_TYPE = 0x0B
  case VERIFICATION_FAILED = 0x0C
  case INSUFFICIENT_SPACE = 0x0D
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum sessionParameterType : Swift.UInt8, Swift.Codable {
  case ppgCapturePeriod = 0x00
  case ppgCaptureDuration = 0x01
  case tag = 0x10
  case reset = 0xfd
  case accept = 0xfe
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum deviceParameterType : Swift.UInt8, Swift.Codable {
  case serialNumber = 0x01
  case chargeCycle = 0x02
  case advertisingInterval = 0x03
  case canLogDiagnostics = 0x04
  case paired = 0x07
  case pageThreshold = 0x08
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum debugDevice : Swift.UInt8, Swift.Codable {
  case spectralParameters = 0x00
  case unknownDevice = 0xff
  public var name: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class liveSyncConfiguration : ObjectiveC.NSObject {
  public var green: Swift.Bool
  public var red: Swift.Bool
  public var ir: Swift.Bool
  public var white_irr: Swift.Bool
  public var white_white: Swift.Bool
  public var imu: Swift.Bool
  public var all: Swift.Bool
  @objc override dynamic public init()
  @objc public var commandString: Swift.String {
    @objc get
  }
  @objc deinit
}
extension Swift.String {
  public func versionGreaterThan(_ compare: Swift.String, separator: Swift.Character) -> Swift.Bool
  public func versionLessThan(_ compare: Swift.String, separator: Swift.Character) -> Swift.Bool
  public func versionEqualTo(_ compare: Swift.String, separator: Swift.Character) -> Swift.Bool
}
@objc public enum hrZoneRangeType : Swift.UInt8, Swift.Codable {
  case below = 0x00
  case within = 0x01
  case above = 0x02
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum packetType : Swift.UInt8, Swift.Codable {
  case unknown = 0x00
  case steps = 0x81
  case activity = 0x83
  case temp = 0x84
  case worn = 0x85
  case sleep = 0x86
  case diagnostic = 0x87
  case ppg_failed = 0x88
  case battery = 0x89
  case charger = 0x8a
  case ppg_metrics = 0x8b
  case continuous_hr = 0x8c
  case steps_active = 0x8d
  case bbi = 0x8e
  case cadence = 0x8f
  case event = 0x90
  case bookend = 0x91
  case algorithmData = 0x92
  case rawAccelXADC = 0xc0
  case rawAccelYADC = 0xc1
  case rawAccelZADC = 0xc2
  case rawAccelCompressedXADC = 0xc3
  case rawAccelCompressedYADC = 0xc4
  case rawAccelCompressedZADC = 0xc5
  case rawGyroXADC = 0xc8
  case rawGyroYADC = 0xc9
  case rawGyroZADC = 0xca
  case rawGyroCompressedXADC = 0xcb
  case rawGyroCompressedYADC = 0xcc
  case rawGyroCompressedZADC = 0xcd
  case ppgCalibrationStart = 0xe0
  case ppgCalibrationDone = 0xd0
  case motionLevel = 0xd1
  case rawPPGCompressedGreen = 0xd3
  case rawPPGCompressedRed = 0xd4
  case rawPPGCompressedIR = 0xd5
  case rawPPGCompressedWhiteIRRPD = 0xd7
  case rawPPGCompressedWhiteWhitePD = 0xd8
  case rawAccelFifoCount = 0xe1
  case rawPPGProximity = 0xe2
  case rawPPGGreen = 0xe3
  case rawPPGRed = 0xe4
  case rawPPGIR = 0xe5
  case rawPPGFifoCount = 0xe6
  case rawPPGWhiteIRRPD = 0xe8
  case rawPPGWhiteWhitePD = 0xe9
  case milestone = 0xf0
  case settings = 0xf1
  case caughtUp = 0xfe
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class biostrapStreamingPacket : ObjectiveC.NSObject, Swift.Codable {
  public var type: universalBTSDK.streamingType
  public var epoch_sec: Swift.Int
  public var epoch_ms: Swift.Int
  public var hr_bpm: Swift.Int
  public var cadence_spm: Swift.Int
  public var hr_confidence: Swift.Int
  public var cadence_confidence: Swift.Int
  public var rmssd_ms: Swift.Int
  public var numberOfDatapoints: Swift.Int
  public var rr_bpm: Swift.Int
  public var snr_ratio: Swift.Int
  public var bbi_ms: Swift.Int
  public var snr_type: Swift.Int
  public var ppg: Swift.Float
  public var ppgWavelengths: universalBTSDK.wavelengthType
  public var motionState: Swift.Bool
  public var raw_data_string: Swift.String
  public var csv: Swift.String {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class biostrapDeviceSDK : ObjectiveC.NSObject {
  @objc public enum biostrapDiscoveryType : Swift.Int {
    case legacy = 1
    case unpaired = 2
    case unpaired_w_uuid = 3
    case paired = 4
    case paired_w_uuid = 5
    case unknown = 99
    public var title: Swift.String {
      get
    }
    public var isPaired: Swift.Bool {
      get
    }
    public var isNotPaired: Swift.Bool {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum biostrapDeviceType : Swift.Int {
    case livotal = 1
    case ethos = 2
    case alter = 3
    case kairos = 4
    case unknown = 99
    public var title: Swift.String {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public enum ethosLEDMode : Swift.Int {
    case blink = 0
    case fade = 1
    case sweep = 2
    case pulse = 3
    case sparkle = 4
    case percent = 5
    public var title: Swift.String {
      get
    }
    public var value: Swift.UInt8 {
      get
    }
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public var logV: ((_ message: Swift.String?, _ file: Swift.String, _ function: Swift.String, _ line: Swift.Int) -> ())?
  @objc public var logD: ((_ message: Swift.String?, _ file: Swift.String, _ function: Swift.String, _ line: Swift.Int) -> ())?
  @objc public var logI: ((_ message: Swift.String?, _ file: Swift.String, _ function: Swift.String, _ line: Swift.Int) -> ())?
  @objc public var logW: ((_ message: Swift.String?, _ file: Swift.String, _ function: Swift.String, _ line: Swift.Int) -> ())?
  @objc public var logE: ((_ message: Swift.String?, _ file: Swift.String, _ function: Swift.String, _ line: Swift.Int) -> ())?
  @objc public var bluetoothReady: ((_ isOn: Swift.Bool) -> ())?
  @objc public var discovered: ((_ id: Swift.String, _ device: universalBTSDK.Device) -> ())?
  @objc public var discoveredUnnamed: ((_ id: Swift.String, _ device: universalBTSDK.Device) -> ())?
  @objc public var connected: ((_ id: Swift.String) -> ())?
  @objc public var disconnected: ((_ id: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var writeEpochComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var readEpochComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ value: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var endSleepComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var debugComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ device: universalBTSDK.debugDevice, _ data: Foundation.Data) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getAllPacketsComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getAllPacketsAcknowledgeComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ ack: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getNextPacketComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ error_code: universalBTSDK.nextPacketStatusType, _ caughtUp: Swift.Bool, _ packet: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getPacketCountComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ count: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var startManualComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var stopManualComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var ledComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var motorComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var enterShipModeComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var writeSerialNumberComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var readSerialNumberComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ partID: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var deleteSerialNumberComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var writeAdvIntervalComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var readAdvIntervalComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ seconds: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var deleteAdvIntervalComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var clearChargeCyclesComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var readChargeCyclesComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ cycles: Swift.Float) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var readCanLogDiagnosticsComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ allow: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var updateCanLogDiagnosticsComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var allowPPGComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var wornCheckComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ code: Swift.String, _ value: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var rawLoggingComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var resetComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var ppgMetrics: ((_ id: Swift.String, _ successful: Swift.Bool, _ packet: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var ppgFailed: ((_ id: Swift.String, _ code: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var disableWornDetectComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var enableWornDetectComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var dataPackets: ((_ id: Swift.String, _ sequence_number: Swift.Int, _ packets: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var dataComplete: ((_ id: Swift.String, _ bad_fw_read_count: Swift.Int, _ bad_fw_parse_count: Swift.Int, _ overflow_count: Swift.Int, _ bad_sdk_parse_count: Swift.Int, _ intermediate: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var dataFailure: ((_ id: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var streamingPacket: ((_ id: Swift.String, _ packet: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var dataAvailable: ((_ id: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var deviceWornStatus: ((_ id: Swift.String, _ isWorn: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var updateFirmwareStarted: ((_ id: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var updateFirmwareFinished: ((_ id: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var updateFirmwareFailed: ((_ id: Swift.String, _ code: Swift.Int, _ message: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var updateFirmwareProgress: ((_ id: Swift.String, _ percentage: Swift.Float) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var manufacturingTestComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var manufacturingTestResult: ((_ id: Swift.String, _ valid: Swift.Bool, _ result: Swift.String) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var startLiveSyncComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var stopLiveSyncComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var endSleepStatus: ((_ id: Swift.String, _ hasSleep: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var buttonClicked: ((_ id: Swift.String, _ presses: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setAskForButtonResponseComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ enable: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getAskForButtonResponseComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ enable: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setHRZoneColorComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ type: universalBTSDK.hrZoneRangeType) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getHRZoneColorComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ type: universalBTSDK.hrZoneRangeType, _ red: Swift.Bool, _ green: Swift.Bool, _ blue: Swift.Bool, _ on_ms: Swift.Int, _ off_ms: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setHRZoneRangeComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getHRZoneRangeComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ enabled: Swift.Bool, _ high_value: Swift.Int, _ low_value: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getPPGAlgorithmComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ algorithm: universalBTSDK.ppgAlgorithmConfiguration, _ state: universalBTSDK.eventType) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setAdvertiseAsHRMComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ asHRM: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getAdvertiseAsHRMComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ asHRM: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setButtonCommandComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ tap: universalBTSDK.buttonTapType, _ command: universalBTSDK.buttonCommandType) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getButtonCommandComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ tap: universalBTSDK.buttonTapType, _ command: universalBTSDK.buttonCommandType) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getPairedComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ paired: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setPairedComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setUnpairedComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getPageThresholdComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ threshold: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setPageThresholdComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var deletePageThresholdComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var recalibratePPGComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getRawLoggingStatusComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ enabled: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getWornOverrideStatusComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ overridden: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var deviceChargingStatus: ((_ id: Swift.String, _ charging: Swift.Bool, _ on_charger: Swift.Bool, _ error: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var setSessionParamComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ parameter: universalBTSDK.sessionParameterType) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var getSessionParamComplete: ((_ id: Swift.String, _ successful: Swift.Bool, _ parameter: universalBTSDK.sessionParameterType, _ value: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var resetSessionParamsComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var acceptSessionParamsComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var batteryLevel: ((_ id: Swift.String, _ percentage: Swift.Int) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var pulseOx: ((_ id: Swift.String, _ spo2: Swift.Float, _ hr: Swift.Float) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var heartRate: ((_ id: Swift.String, _ epoch: Swift.Int, _ hr: Swift.Int, _ rr: [Swift.Double]) -> ())?
  @available(*, deprecated, message: "Use the device object's publisher directly.  This will be removed in a future version of the SDK")
  @objc public var airplaneModeComplete: ((_ id: Swift.String, _ successful: Swift.Bool) -> ())?
  @objc public var connectedDevices: [universalBTSDK.Device] {
    @objc get
  }
  @objc public var discoveredDevices: [universalBTSDK.Device] {
    @objc get
  }
  @objc public var version: Swift.String {
    @objc get
  }
  @objc public func addPairedDeviceWithId(_ id: Swift.String, name: Swift.String)
  @objc public func removePairedDeviceWithId(_ id: Swift.String)
  @objc public func clearPairedDevices()
  @objc override dynamic public init()
  public func acquireLicense(_ licenseKey: Swift.String) -> (Swift.Bool, Swift.Int, Swift.String)
  @objc public func startScan(inBackground: Swift.Bool = false, forPaired: Swift.Bool = true, forUnpaired: Swift.Bool = true, forLegacy: Swift.Bool = true) -> Swift.Bool
  @objc public func stopScan()
  @objc public func connect(_ id: Swift.String)
  @objc public func disconnect(_ id: Swift.String)
  @objc public func getCSVFromDataPackets(_ json: Swift.String) -> Swift.String
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func writeEpoch(_ id: Swift.String, newEpoch: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func readEpoch(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func endSleep(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func debug(_ id: Swift.String, device: universalBTSDK.debugDevice, data: Foundation.Data)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getAllPackets(_ id: Swift.String, pages: Swift.Int, delay: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getAllPacketsAcknowledge(_ id: Swift.String, ack: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getNextPacket(_ id: Swift.String, single: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getPacketCount(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func disableWornDetect(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func enableWornDetect(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func startManual(_ id: Swift.String, algorithms: universalBTSDK.ppgAlgorithmConfiguration)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func stopManual(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func livotalLED(_ id: Swift.String, red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func ethosLED(_ id: Swift.String, red: Swift.Int, green: Swift.Int, blue: Swift.Int, mode: universalBTSDK.biostrapDeviceSDK.ethosLEDMode, seconds: Swift.Int, percent: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func alterLED(_ id: Swift.String, red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func kairosLED(_ id: Swift.String, red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func motor(_ id: Swift.String, milliseconds: Swift.Int, pulses: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func enterShipMode(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func writeSerialNumber(_ id: Swift.String, partID: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func readSerialNumber(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func deleteSerialNumber(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func writeAdvInterval(_ id: Swift.String, seconds: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func readAdvInterval(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func deleteAdvInterval(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func clearChargeCycles(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func readChargeCycles(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func readCanLogDiagnostics(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func updateCanLogDiagnostics(_ id: Swift.String, allow: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func livotalManufacturingTest(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func ethosManufacturingTest(_ id: Swift.String, test: universalBTSDK.ethosManufacturingTestType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func alterManufacturingTest(_ id: Swift.String, test: universalBTSDK.alterManufacturingTestType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func kairosManufacturingTest(_ id: Swift.String, test: universalBTSDK.kairosManufacturingTestType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func startLiveSync(_ id: Swift.String, configuration: universalBTSDK.liveSyncConfiguration)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func stopLiveSync(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setAskForButtonResponse(_ id: Swift.String, enable: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getAskForButtonResponse(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setHRZoneColor(_ id: Swift.String, type: universalBTSDK.hrZoneRangeType, red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, on_milliseconds: Swift.Int, off_milliseconds: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getHRZoneColor(_ id: Swift.String, type: universalBTSDK.hrZoneRangeType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setHRZoneRange(_ id: Swift.String, enabled: Swift.Bool, high_value: Swift.Int, low_value: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getHRZoneRange(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getPPGAlgorithm(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setAdvertiseAsHRM(_ id: Swift.String, asHRM: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getAdvertiseAsHRM(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setButtonCommand(_ id: Swift.String, tap: universalBTSDK.buttonTapType, command: universalBTSDK.buttonCommandType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getButtonCommand(_ id: Swift.String, tap: universalBTSDK.buttonTapType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setPaired(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setUnpaired(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getPaired(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setPageThreshold(_ id: Swift.String, threshold: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getPageThreshold(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func deletePageThreshold(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func recalibratePPG(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func allowPPG(_ id: Swift.String, allow: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func wornCheck(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func rawLogging(_ id: Swift.String, enable: Swift.Bool)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getRawLoggingStatus(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getWornOverrideStatus(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func airplaneMode(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func reset(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func updateFirmware(_ id: Swift.String, file: Foundation.URL)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func cancelFirmwareUpdate(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func setSessionParam(_ id: Swift.String, parameter: universalBTSDK.sessionParameterType, value: Swift.Int)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func getSessionParam(_ id: Swift.String, parameter: universalBTSDK.sessionParameterType)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func resetSessionParams(_ id: Swift.String)
  @available(*, deprecated, message: "Send commands to the Device object directly.  This will be removed in a future version of the SDK")
  @objc public func acceptSessionParams(_ id: Swift.String)
  @objc deinit
}
@objc public enum ppgFailedType : Swift.UInt8, Swift.Codable {
  case worn = 0x00
  case start = 0x01
  case interrupt = 0x02
  case overflow = 0x03
  case fifoRead = 0x04
  case alreadyRunning = 0x05
  case lowBattery = 0x06
  case userDisallowed = 0x07
  case timedNotWorn = 0x08
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class biostrapDataPacket : ObjectiveC.NSObject, Swift.Codable {
  public var type: universalBTSDK.packetType
  public var settings_type: universalBTSDK.settingsType
  public var epoch: Swift.Int
  public var end_epoch: Swift.Int
  public var worn: Swift.Bool
  public var epoch_ms: Swift.Int
  public var seconds: Swift.Int
  public var value: Swift.Int
  public var active_seconds: Swift.Int
  public var voltage: Swift.Int
  public var temperature: Swift.Float
  public var hr_valid: Swift.Bool
  public var hr_result: Swift.Float
  public var hrv_valid: Swift.Bool
  public var hrv_result: Swift.Float
  public var rr_valid: Swift.Bool
  public var rr_result: Swift.Float
  public var spo2_valid: Swift.Bool
  public var spo2_result: Swift.Float
  public var tag: Swift.String
  public var settings_value: Swift.Float
  public var raw_data: Foundation.Data
  public var raw_data_string: Swift.String
  public var diagnostic_type: universalBTSDK.diagnosticType
  public var ppg_failed_type: universalBTSDK.ppgFailedType
  public var ppg_metrics_status: universalBTSDK.ppgStatusType
  public var continuous_hr: [Swift.Int]
  public var bbi: [Swift.Int]
  public var cadence_spm: [Swift.Int]
  public var event_type: universalBTSDK.eventType
  public var bookend_type: universalBTSDK.bookendType
  public var bookend_payload: Swift.Int
  public var duration_ms: Swift.Int
  public var green_led_current: Swift.Int
  public var red_led_current: Swift.Int
  public var ir_led_current: Swift.Int
  public var white_irr_led_current: Swift.Int
  public var white_white_led_current: Swift.Int
  public var charging: Swift.Bool
  public var charge_full: Swift.Bool
  public var algorithmPacketSubType: universalBTSDK.algorithmPacketType
  public var algorithmPacketIndex: Swift.Int
  public var algorithmPacketCount: Swift.Int
  public var algorithmPacketData: Foundation.Data
  public var csv: Swift.String {
    get
  }
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
@objc public enum bookendType : Swift.UInt8, Swift.Codable {
  case activity = 0x00
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum streamingType : Swift.UInt8, Swift.Codable {
  case hr = 0x00
  case hrv = 0x01
  case rr = 0x02
  case bbi = 0x03
  case ppgSNR = 0x04
  case ppgWave = 0x05
  case motionState = 0x06
  case unknown = 0xff
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension universalBTSDK.biostrapDeviceSDK : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheralDidUpdateName(_ peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func peripheralIsReady(toSendWriteWithoutResponse peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didModifyServices invalidatedServices: [CoreBluetooth.CBService])
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didReadRSSI RSSI: Foundation.NSNumber, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didOpen channel: CoreBluetooth.CBL2CAPChannel?, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor descriptor: CoreBluetooth.CBDescriptor, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor descriptor: CoreBluetooth.CBDescriptor, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didWriteValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverDescriptorsFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverIncludedServicesFor service: CoreBluetooth.CBService, error: (any Swift.Error)?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateNotificationStateFor characteristic: CoreBluetooth.CBCharacteristic, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didUpdateANCSAuthorizationFor peripheral: CoreBluetooth.CBPeripheral)
}
extension universalBTSDK.biostrapDeviceSDK : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: (any Swift.Error)?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, willRestoreState dict: [Swift.String : Any])
}
@objc public enum buttonCommandType : Swift.UInt8, Swift.Codable, Swift.CaseIterable {
  case none = 0x00
  case showBattery = 0x01
  case advertiseShowConnection = 0x02
  case hrmAdvertiseToggleActivity = 0x03
  case shutDown = 0x04
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias AllCases = [universalBTSDK.buttonCommandType]
  public typealias RawValue = Swift.UInt8
  public static var allCases: [universalBTSDK.buttonCommandType] {
    get
  }
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum eventType : Swift.UInt8, Swift.Codable {
  case ppgUserTriggerButton = 0x00
  case ppgUserTriggerAutoActivity = 0x01
  case ppgUserTriggerBLE = 0x02
  case ppgUserTriggerUART = 0x03
  case ppgUserTriggerButtonStop = 0x04
  case ppgUserTriggerAutoActivityStop = 0x05
  case ppgUserTriggerBLEStop = 0x06
  case ppgUserTriggerUARTStop = 0x07
  case ppgUserTriggerManufacturingTestStop = 0x08
  case singlePress = 0x09
  case doublePress = 0x0a
  case triplePress = 0x0b
  case longPress = 0x0c
  case none = 0x0d
  case ppgWornStop = 0x0e
  case ppgTimerStop = 0x0f
  case ppgFWStop = 0x10
  case ppgFWStart = 0x11
  case unknown = 0xff
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum algorithmPacketType : Swift.UInt8, Swift.Codable {
  case philipsSleep = 0x2f
  case unknown = 0xff
  public var title: Swift.String {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum wavelengthType : Swift.UInt8, Swift.Codable {
  case green = 0x00
  case red = 0x01
  case IR = 0x02
  case whiteIR = 0x03
  case whiteWhite = 0x04
  case unknown = 0xff
  public init(from decoder: any Swift.Decoder) throws
  public var title: Swift.String {
    get
  }
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class Device : ObjectiveC.NSObject, Foundation.ObservableObject {
  @objc public var type: universalBTSDK.biostrapDeviceSDK.biostrapDeviceType
  @Combine.Published @_projectedValueProperty($name) public var name: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $name: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($id) public var id: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $id: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($discovery_type) public var discovery_type: universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $discovery_type: Combine.Published<universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  final public let readEpochComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Int), Swift.Never>
  final public let writeEpochComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let startManualComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let stopManualComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let ledComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let getRawLoggingStatusComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let getWornOverrideStatusComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let writeSerialNumberComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let readSerialNumberComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.String), Swift.Never>
  final public let deleteSerialNumberComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let writeAdvIntervalComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let readAdvIntervalComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Int), Swift.Never>
  final public let deleteAdvIntervalComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let clearChargeCyclesComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let readChargeCyclesComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Float), Swift.Never>
  final public let setAdvertiseAsHRMComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let getAdvertiseAsHRMComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let setButtonCommandComplete: Combine.PassthroughSubject<(Swift.Bool, universalBTSDK.buttonTapType, universalBTSDK.buttonCommandType), Swift.Never>
  final public let getButtonCommandComplete: Combine.PassthroughSubject<(Swift.Bool, universalBTSDK.buttonTapType, universalBTSDK.buttonCommandType), Swift.Never>
  final public let setAskForButtonResponseComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let getAskForButtonResponseComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool), Swift.Never>
  final public let setHRZoneColorComplete: Combine.PassthroughSubject<(Swift.Bool, universalBTSDK.hrZoneRangeType), Swift.Never>
  final public let getHRZoneColorComplete: Combine.PassthroughSubject<(Swift.Bool, universalBTSDK.hrZoneRangeType, Swift.Bool, Swift.Bool, Swift.Bool, Swift.Int, Swift.Int), Swift.Never>
  final public let setHRZoneRangeComplete: Combine.PassthroughSubject<Swift.Bool, Swift.Never>
  final public let getHRZoneRangeComplete: Combine.PassthroughSubject<(Swift.Bool, Swift.Bool, Swift.Int, Swift.Int), Swift.Never>
  final public let getPPGAlgorithmComplete: Combine.PassthroughSubject<(Swift.Bool, universalBTSDK.ppgAlgorithmConfiguration, universalBTSDK.eventType), Swift.Never>
  final public let heartRateUpdated: Combine.PassthroughSubject<(Swift.Int, Swift.Int, [Swift.Double]), Swift.Never>
  @Combine.Published @_projectedValueProperty($batteryValid) public var batteryValid: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $batteryValid: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($batteryLevel) public var batteryLevel: Swift.Int {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $batteryLevel: Combine.Published<Swift.Int>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($wornStatus) public var wornStatus: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $wornStatus: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($chargingStatus) public var chargingStatus: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $chargingStatus: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($modelNumber) public var modelNumber: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $modelNumber: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($firmwareRevision) public var firmwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $firmwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($hardwareRevision) public var hardwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $hardwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($manufacturerName) public var manufacturerName: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $manufacturerName: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($serialNumber) public var serialNumber: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $serialNumber: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($bluetoothSoftwareRevision) public var bluetoothSoftwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $bluetoothSoftwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($algorithmsSoftwareRevision) public var algorithmsSoftwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $algorithmsSoftwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($medtorSoftwareRevision) public var medtorSoftwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $medtorSoftwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($sleepSoftwareRevision) public var sleepSoftwareRevision: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $sleepSoftwareRevision: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @objc override dynamic public init()
  convenience public init(_ name: Swift.String, id: Swift.String, peripheral: CoreBluetooth.CBPeripheral?, type: universalBTSDK.biostrapDeviceSDK.biostrapDeviceType, discoveryType: universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType)
  convenience public init(_ name: Swift.String, id: Swift.String, peripheral: CoreBluetooth.CBPeripheral?, discoveryType: universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType)
  public func writeEpoch(_ newEpoch: Swift.Int)
  public func readEpoch()
  public func startManual(_ algorithms: universalBTSDK.ppgAlgorithmConfiguration)
  public func stopManual()
  public func livotalLED(red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  public func ethosLED(red: Swift.Int, green: Swift.Int, blue: Swift.Int, mode: universalBTSDK.biostrapDeviceSDK.ethosLEDMode, seconds: Swift.Int, percent: Swift.Int)
  public func alterLED(red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  public func kairosLED(red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, blink: Swift.Bool, seconds: Swift.Int)
  public func writeSerialNumber(_ partID: Swift.String)
  public func readSerialNumber()
  public func deleteSerialNumber()
  public func writeAdvInterval(_ seconds: Swift.Int)
  public func readAdvInterval()
  public func deleteAdvInterval()
  public func clearChargeCycles()
  public func readChargeCycles()
  public func setAskForButtonResponse(_ enable: Swift.Bool)
  public func getAskForButtonResponse()
  public func setHRZoneColor(_ type: universalBTSDK.hrZoneRangeType, red: Swift.Bool, green: Swift.Bool, blue: Swift.Bool, on_milliseconds: Swift.Int, off_milliseconds: Swift.Int)
  public func getHRZoneColor(_ type: universalBTSDK.hrZoneRangeType)
  public func setHRZoneRange(_ enabled: Swift.Bool, high_value: Swift.Int, low_value: Swift.Int)
  public func getHRZoneRange()
  public func getPPGAlgorithm()
  public func setAdvertiseAsHRM(_ asHRM: Swift.Bool)
  public func getAdvertiseAsHRM()
  public func setButtonCommand(_ tap: universalBTSDK.buttonTapType, command: universalBTSDK.buttonCommandType)
  public func getButtonCommand(_ tap: universalBTSDK.buttonTapType)
  public func getRawLoggingStatus()
  public func getWornOverrideStatus()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ppgAlgorithmConfiguration : ObjectiveC.NSObject {
  public var hr: Swift.Bool
  public var hrv: Swift.Bool
  public var rr: Swift.Bool
  public var spo2: Swift.Bool
  public var fda_spo2: Swift.Bool
  public var continuous: Swift.Bool
  @objc override dynamic public init()
  @objc public var commandString: Swift.String {
    @objc get
  }
  @objc deinit
}
extension universalBTSDK.diagnosticType : Swift.Equatable {}
extension universalBTSDK.diagnosticType : Swift.Hashable {}
extension universalBTSDK.diagnosticType : Swift.RawRepresentable {}
extension universalBTSDK.livotalManufacturingTestType : Swift.Equatable {}
extension universalBTSDK.livotalManufacturingTestType : Swift.Hashable {}
extension universalBTSDK.alterManufacturingTestType : Swift.Equatable {}
extension universalBTSDK.alterManufacturingTestType : Swift.Hashable {}
extension universalBTSDK.alterManufacturingTestType : Swift.RawRepresentable {}
extension universalBTSDK.kairosManufacturingTestType : Swift.Equatable {}
extension universalBTSDK.kairosManufacturingTestType : Swift.Hashable {}
extension universalBTSDK.kairosManufacturingTestType : Swift.RawRepresentable {}
extension universalBTSDK.ethosManufacturingTestType : Swift.Equatable {}
extension universalBTSDK.ethosManufacturingTestType : Swift.Hashable {}
extension universalBTSDK.ethosManufacturingTestType : Swift.RawRepresentable {}
extension universalBTSDK.nextPacketStatusType : Swift.Equatable {}
extension universalBTSDK.nextPacketStatusType : Swift.Hashable {}
extension universalBTSDK.nextPacketStatusType : Swift.RawRepresentable {}
extension universalBTSDK.settingsType : Swift.Equatable {}
extension universalBTSDK.settingsType : Swift.Hashable {}
extension universalBTSDK.settingsType : Swift.RawRepresentable {}
extension universalBTSDK.buttonTapType : Swift.Equatable {}
extension universalBTSDK.buttonTapType : Swift.Hashable {}
extension universalBTSDK.buttonTapType : Swift.RawRepresentable {}
extension universalBTSDK.ppgStatusType : Swift.Equatable {}
extension universalBTSDK.ppgStatusType : Swift.Hashable {}
extension universalBTSDK.ppgStatusType : Swift.RawRepresentable {}
extension universalBTSDK.firmwareErorCode : Swift.Equatable {}
extension universalBTSDK.firmwareErorCode : Swift.Hashable {}
extension universalBTSDK.firmwareErorCode : Swift.RawRepresentable {}
extension universalBTSDK.extendedFirmwareError : Swift.Equatable {}
extension universalBTSDK.extendedFirmwareError : Swift.Hashable {}
extension universalBTSDK.extendedFirmwareError : Swift.RawRepresentable {}
extension universalBTSDK.sessionParameterType : Swift.Equatable {}
extension universalBTSDK.sessionParameterType : Swift.Hashable {}
extension universalBTSDK.sessionParameterType : Swift.RawRepresentable {}
extension universalBTSDK.deviceParameterType : Swift.Equatable {}
extension universalBTSDK.deviceParameterType : Swift.Hashable {}
extension universalBTSDK.deviceParameterType : Swift.RawRepresentable {}
extension universalBTSDK.debugDevice : Swift.Equatable {}
extension universalBTSDK.debugDevice : Swift.Hashable {}
extension universalBTSDK.debugDevice : Swift.RawRepresentable {}
extension universalBTSDK.hrZoneRangeType : Swift.Equatable {}
extension universalBTSDK.hrZoneRangeType : Swift.Hashable {}
extension universalBTSDK.hrZoneRangeType : Swift.RawRepresentable {}
extension universalBTSDK.packetType : Swift.Equatable {}
extension universalBTSDK.packetType : Swift.Hashable {}
extension universalBTSDK.packetType : Swift.RawRepresentable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType : Swift.Equatable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType : Swift.Hashable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDiscoveryType : Swift.RawRepresentable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDeviceType : Swift.Equatable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDeviceType : Swift.Hashable {}
extension universalBTSDK.biostrapDeviceSDK.biostrapDeviceType : Swift.RawRepresentable {}
extension universalBTSDK.biostrapDeviceSDK.ethosLEDMode : Swift.Equatable {}
extension universalBTSDK.biostrapDeviceSDK.ethosLEDMode : Swift.Hashable {}
extension universalBTSDK.biostrapDeviceSDK.ethosLEDMode : Swift.RawRepresentable {}
extension universalBTSDK.ppgFailedType : Swift.Equatable {}
extension universalBTSDK.ppgFailedType : Swift.Hashable {}
extension universalBTSDK.ppgFailedType : Swift.RawRepresentable {}
extension universalBTSDK.bookendType : Swift.Equatable {}
extension universalBTSDK.bookendType : Swift.Hashable {}
extension universalBTSDK.bookendType : Swift.RawRepresentable {}
extension universalBTSDK.streamingType : Swift.Equatable {}
extension universalBTSDK.streamingType : Swift.Hashable {}
extension universalBTSDK.streamingType : Swift.RawRepresentable {}
extension universalBTSDK.buttonCommandType : Swift.Equatable {}
extension universalBTSDK.buttonCommandType : Swift.Hashable {}
extension universalBTSDK.buttonCommandType : Swift.RawRepresentable {}
extension universalBTSDK.eventType : Swift.Equatable {}
extension universalBTSDK.eventType : Swift.Hashable {}
extension universalBTSDK.eventType : Swift.RawRepresentable {}
extension universalBTSDK.algorithmPacketType : Swift.Equatable {}
extension universalBTSDK.algorithmPacketType : Swift.Hashable {}
extension universalBTSDK.algorithmPacketType : Swift.RawRepresentable {}
extension universalBTSDK.wavelengthType : Swift.Equatable {}
extension universalBTSDK.wavelengthType : Swift.Hashable {}
extension universalBTSDK.wavelengthType : Swift.RawRepresentable {}
